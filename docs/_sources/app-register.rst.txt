----------------------
Register App
----------------------

The examples shown so far illustrate methods that take advantage of REST oriented resources that encorporate a full list of methods with automatic validation. Some problems do not require that, and may get in the way of solving the problem at hand.

In this section we will look at a common approach to registering users, confirming a sign-up and enabling logging in to a system within the context of using this package's resources.

The Sequence
------------
A common sequence of steps take place for a registering a new user.

*   A front-end form receives data such as a username and email and  POSTs to /register.
*   The post process at `/register` creates a user record that is marked as unconfirmed. A message is sent to a process to create an email to the new user's email address to confirm the registration.
*   The user receives the email from the system and clicks on the link, which is GET `/confirm/<token>`.
*   The token is decoded and confirmed (or not) and the user is marked as having been confirmed.
*   The user can login into the system as a confirmed user.

Required Resources
------------------
*   **POST /register:** A resource that implements POST, but nothing else. It can receive the user data, create a user record, and send a message to queue. To accomplish this, we will use a function called `create_resource` that is part of Flask-RESTful-DBBase. With it, we can create a ModelResource that has just the POST method and tweak it a little bit with an `after_commit` function.
*   **GET /confirm/<token>:** A resource that implements a GET, but with the confirmation token. Once the confirmation is decoded, it then uses a user query to get the user record and update the confirmation. It is better to drop back to a more generic Flask-RESTful Resource for this resource. We will discuss this further below.
*   **POST /sign-in:** A resource that implements only a POST as before. With whatever authentication approach is used, it can be triggered in the `after_commit` function as well.

Initialize
^^^^^^^^^^
Initialization of the app includes some helper functions. We will use `URLSafeTimedSerializer` from itsdangerous to make a token that expires after limited time. To faciliate the use of tokens a modification has been made to the app configuration as well. And, we include a function `create_resource` for creation of our custom resources.

.. include:: register_app_code_00.rst

User Model
^^^^^^^^^^
The user model has some standard fields. The user will not be able to sign in until the user record is marked as *active*. This occurs upon confirmation of the account. Additionally, every time that the user logs into the account, the `last_login` will be updated.

We are ignoring any encryption scheme for the password for now. Any actual implementation would require it.

Finally, `SERIAL_FIELDS` is set as the default for returning user information. By the way, since the `password` column is set as `WriteOnlyColumn`, it would not be included in serial fields in any case.

.. include:: register_app_code_01.rst

Create Expiring Tokens
^^^^^^^^^^^^^^^^^^^^^^
The machinery for encoding and decoding tokens is found in the following:

.. include:: register_app_code_02.rst


Before / After Commits
^^^^^^^^^^^^^^^^^^^^^^
When the user registers, just after the commit to the database, an `after_commit` will run that creates the token and we can see a notation where the command for the email would be to a message queue. We will not implement this, just point out where it takes place.

When the user signs in to the system there will be an update to the user record indicating that sign-in time.

.. include:: register_app_code_03.rst

Create Register Resource
^^^^^^^^^^^^^^^^^^^^^^^^
Using the `create_resource` function we can create the Register resource with only the `post` method. Using a prototype resource as the basis with a few parameters we can create the RegisterResource class. The `class_vars` parameter is a location where we can add the customization for the `after_commit` process.

By using this process we have the advantages of deserialization and creation of the user record without the unwanted HTML methods.

.. include:: register_app_code_04.rst

Create ConfirmResource
^^^^^^^^^^^^^^^^^^^^^^
The confirmation resource represents an instance where the datacentric resources that we have focused on are not the right tool for the job. By design a `ModelResource` finds the primary keys in a GET url from the key(s) of the model class used. With our confirmation token being used as the key, that would not work easily. Second, a model resource usually returns a representation of the data model being used, but a single message would do. It would reasonable for the front-end to redirect to a sign-in.


.. include:: register_app_code_05.rst

Create SignInResource
^^^^^^^^^^^^^^^^^^^^^
The SignInResource can be created with the `create_resource` function. As with the RegisterResource, we customize with the `before_commit` function that we created above. And as before, only the POST method is implemented.

.. include:: register_app_code_06.rst

Create MetaResources
^^^^^^^^^^^^^^^^^^^^
Two meta resources can be made, and the ConfirmResource is out of scope for Flask-RESTful-DBBase documentation.

.. include:: register_app_code_07.rst


Add Resources to the API
^^^^^^^^^^^^^^^^^^^^^^^^
Note that ConfirmResource must use an explicit URL.

.. include:: register_app_code_08.rst



Use the API
-----------

Register a new user.
show confirm

get with confirm

Sign-in


Post without authentication
^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. include:: owner_app_v1_00.rst

Post An Order, Wrong Login
^^^^^^^^^^^^^^^^^^^^^^^^^^
.. include:: owner_app_v1_01.rst

