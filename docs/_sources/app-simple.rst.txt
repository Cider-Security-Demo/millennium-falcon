------------
A First Look
------------
We will create a small app that shows some of the capabilities.

First, we import and configure the database. Within the Flask environment, DBBase provides a thin wrapper around Flask-SQLAlchemy but with a different Model class.

The data-aware resources are then imported. Once that is done, a couple database models are created that we will use for our example.

Flask-RESTful Resource subclasses implement this functionality.

* :class:`~flask_restful_dbbase.resources.ModelResource` -- This class implements the standard methods associated with interacting with a single record, namely GET, POST, PUT, PATCH, and DELETE.
* :class:`~flask_restful_dbbase.resources.CollectionModelResource` -- This class implements a GET for collections. The other methods, being less common for collections, have been left off to avoid activating an unwanted (surprise) capability.
* :class:`~flask_restful_dbbase.resources.MetaResource` -- This class implements a GET that documents the capabilities of a resource class.


Initialize the App and Models
-----------------------------

.. include:: simple_app_code_00.rst


Next, some sample records are created so that we have something to look at.

.. include:: simple_app_code_01.rst


Create Resources
----------------

Now we can create some resources that will use these models.

.. include:: simple_app_code_02.rst

So what will this do? Once added to the API, the methods GET, POST, PUT, PATCH, and DELETE will be available at the default URLs of:

.. code-block::

    /books              <-- the collection resource URL
    /books              <-- the URL for post
    /books/<int:id>     <-- the URL for get/put/patch/delete

    /authors            <-- the collection resource URL
    /authors            <-- the URL for post
    /authors/<int:id>   <-- the URL for get/put/patch/delete

..

Another resource type, the :class:`~flask_restful_dbbase.resources.MetaResource`, can provide detailed information about your API and the requirements and capabilities by URL.

Such meta resources are created by informing the meta resource of the resource class.

.. include:: simple_app_code_03.rst


Once added to the API,  The following URLs will become available.

.. code-block::

    /meta/authors/single
    /meta/authors/collection
    /meta/books/single
    /meta/books/collection

..

Finally, the resources are added to the api. You can see below that the URLs are generated by the resources themselves. These functions are for convenience, the URLs can also be added in the usual way with Flask-RESTful as well.

.. include:: simple_app_code_04.rst

Use the API
---------------------

As a first step, let us get a book.

.. include:: simple_app_00.rst

Note that the column names have been converted to camel case. Also, because a relationship has been specified in the table, the author has been included by default. As to what shows or does not, that is under your control through configuration.

Now we will post some data. But first, let us look at error checking with invalid data.

.. include:: simple_app_01.rst

Here we get back an error message. Data validation compares the data received versus what can posted to the database. An attempt is made to provide meaningful errors so that an appropriate action can be taken. In this case the publication year is missing and the title is too long.

Now we can post a book that does not have errors:

.. include:: simple_app_02.rst

We can select from our collection of books:

.. include:: simple_app_03.rst


Meta Information
----------------

Finally, we can document our API using meta information. This enables comprehensive information to be given to users of your API.

The following output details the entire book resource. Incidently, we could have also specified `curl -g http://localhost:5000/meta/books/single?get` to see only the GET method requirements.

.. include:: simple_app_04.rst


With the use of method decorators for authenticated users, a fair number of database tables can be presented via an API with just this vanilla approach.

In the next section we will look at a few tweaks and modifications that can handle more complicated issues.

Next: :ref:`Simple Owner App`
